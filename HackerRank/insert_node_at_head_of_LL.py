# https://www.hackerrank.com/challenges/insert-a-node-at-the-head-of-a-linked-list/problem?isFullScreen=true
# Youâ€™re given the pointer to the head node of a linked list and an integer to add to the list. Create a new node with the given integer, insert this node at the head of the linked list and return the new head node. The head pointer given may be null meaning that the initial list is empty.


def insertNodeAtHead(head, data):
    # Write your code here
    new_node = SinglyLinkedListNode(data)

    # for first insert where head points to null
    if head == None:
        # head is null now points to new_node (otherway then new_node = null)
        head = new_node
        return head
    else:  # insert new node at the head of LL
        new_node.next = head
        head = new_node
        return head

# python tutor: http://pythontutor.com/live.html#code=class%20Node%3A%0A%20%20%20%20def%20__init__%28self,%20new_data%29%3A%0A%20%20%20%20%20%20%20%20self.data%20%3D%20new_data%0A%20%20%20%20%20%20%20%20self.next%20%3D%20None%0Aclass%20LinkedList%3A%0A%20%20%20%20def%20__init__%28self%29%3A%0A%20%20%20%20%20%20%20%20self.head%20%3D%20None%0A%0A%20%20%20%20%23%20createNode%20and%20and%20make%20linked%20list%0A%20%20%20%20def%20push%28self,%20new_data%29%3A%0A%20%20%20%20%20%20%20%20new_node%20%3D%20Node%28new_data%29%0A%20%20%20%20%20%20%20%20new_node.next%20%3D%20self.head%0A%20%20%20%20%20%20%20%20self.head%20%3D%20new_node%0A%0A%20%20%20%20def%20deleteNode%28self,%20k%29%3A%20%23%20O%28n%29%20-%20only%20iterating%20once%20through%0A%20%20%20%20%20%20%20%20first%20%3D%20self.head%20%20%23%20starts%20at%20head%0A%20%20%20%20%20%20%20%20second%20%3D%20self.head%20%23%20goes%20to%20kth%20node%20from%20beginning%0A%20%20%20%20%20%20%20%20%23%20start%20by%20getting%20the%20second%20pointer%20to%20kth%20node%20%28k%20difference%29%0A%20%20%20%20%20%20%20%20for%20i%20in%20range%28k%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20If%20count%20of%20nodes%20in%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%20given%20list%20is%20less%20than%20'k'%0A%20%20%20%20%20%20%20%20%20%20%20%20%23%201%29%20don't%20change%20and%20return%20original%20LL%0A%20%20%20%20%20%20%20%20%20%20%20%20if%28second.next%20%3D%3D%20None%29%3A%20%23%20if%20current%20node%20is%20the%20only%20one%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20and%20if%20index%20%3D%20k%20%28this%20is%20the%20intended%20node%20we%20want%20to%20delete%29%20then%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20delete%20the%20head%20node%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%28i%20%3D%3D%20k%20-%201%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20self.head%20%3D%20self.head.next%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20return%20LL%20unchanged%20if%20k%20is%20longer%20then%20length%20of%20LL,%20else%20return%20empty%20LL%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20self.head%0A%20%20%20%20%20%20%20%20%20%20%20%20second%20%3D%20second.next%20%23%20else%20keep%20moving%20second%20pointer%20accross%20until%20at%20end%20of%20LL%0A%20%20%20%20%20%20%20%20%23%20next,increment%20both%20pointers%20by%20one%20at%20the%20same%20time%20until%20second%20is%20pointing%20to%20last%20node%20in%20LL%0A%20%20%20%20%20%20%20%20while%28second.next%20!%3D%20None%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20second%20%3D%20second.next%0A%20%20%20%20%20%20%20%20%20%20%20%20first%20%3D%20first.next%0A%20%20%20%20%20%20%20%20%23%20now%20first%20pointer%20should%20be%20pointing%20to%20the%20kth%20node%20from%20the%20end%0A%20%20%20%20%20%20%20%20%23%20remove%20pointer%20to%20next%20node%28kth%20node%29to%20point%20to%20kth%20node%20next%20node%0A%20%20%20%20%20%20%20%20first.next%20%3D%20first.next.next%0A%20%20%20%20%0A%20%20%20%20def%20insertNodeAtHead%28self,%20data%29%3A%0A%20%20%20%20%20%20%20%20%23%20Write%20your%20code%20here%0A%20%20%20%20%20%20%20%20new_node%20%3D%20Node%28data%29%0A%0A%20%20%20%20%20%20%20%20%23%20for%20first%20insert%20where%20head%20points%20to%20null%0A%20%20%20%20%20%20%20%20if%20self.head%20%3D%3D%20None%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20self.head%20%3D%20new_node%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20self.head%0A%20%20%20%20%20%20%20%20else%3A%20%23%20insert%20new%20node%20at%20the%20head%20of%20LL%0A%20%20%20%20%20%20%20%20%20%20%20%20new_node.next%20%3D%20self.head%0A%20%20%20%20%20%20%20%20%20%20%20%20self.head%20%3D%20new_node%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20self.head%0A%0A%20%20%20%20def%20printList%28self%29%3A%0A%20%20%20%20%20%20%20%20tmp_head%20%3D%20self.head%0A%20%20%20%20%20%20%20%20while%28tmp_head%20!%3D%20None%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20print%28tmp_head.data,%20end%20%3D%20'%20'%29%0A%20%20%20%20%20%20%20%20%20%20%20%20tmp_head%20%3D%20tmp_head.next%0A%0Allist%20%3D%20LinkedList%28%29%0A%23%20llist.push%2811%29%0A%23%20llist.push%2812%29%0A%23%20llist.push%2813%29%0A%23%20llist.push%2814%29%0A%23%20llist.push%2815%29%0A%23%20llist.push%2816%29%0A%23%20llist.push%28382%29%0A%23%20llist.push%28484%29%0A%23%20llist.push%28392%29%0A%23%20llist.push%28975%29%0Aprint%28%22Created%20Linked%20list%20is%3A%22%29%0Allist.printList%28%29%0A%23%20llist.deleteNode%284%29%0Allist.insertNodeAtHead%28321%29%0Aprint%28%22%5CnLinked%20List%20after%20Deletion%20is%3A%22%29%0Allist.printList%28%29&cumulative=false&curInstr=21&heapPrimitives=nevernest&mode=display&origin=opt-live.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false
